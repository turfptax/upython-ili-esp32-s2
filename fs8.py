
# Code generated by font-to-py.py.
# Font: FreeSans.ttf
version = '0.2'

def height():
    return 8

def max_width():
    return 8

def hmap():
    return False

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 126

_font =\
b'\x04\x00\x01\x29\x07\x00\x02\x00\x00\x00\x02\x00\x2f\x00\x03\x00'\
b'\x03\x02\x00\x04\x00\x24\x1e\x3c\x17\x04\x00\x36\x37\x49\x3a\x07'\
b'\x00\x06\x0a\x36\x0c\x32\x28\x30\x05\x00\x10\x2e\x2d\x32\x28\x02'\
b'\x00\x03\x00\x03\x00\x7e\x00\x00\x03\x00\xc1\x3e\x00\x03\x00\x00'\
b'\x03\x00\x05\x00\x00\x10\x3c\x10\x00\x02\x00\x20\x00\x03\x00\x08'\
b'\x08\x00\x02\x00\x20\x00\x02\x00\x38\x06\x04\x00\x1e\x21\x21\x3e'\
b'\x04\x00\x02\x3f\x00\x00\x04\x00\x22\x31\x29\x26\x04\x00\x12\x21'\
b'\x29\x3e\x04\x00\x18\x14\x3e\x10\x04\x00\x02\x25\x25\x39\x04\x00'\
b'\x1e\x2a\x25\x3a\x04\x00\x01\x31\x0d\x03\x04\x00\x16\x29\x29\x3e'\
b'\x04\x00\x06\x29\x29\x1e\x02\x00\x24\x00\x02\x00\x64\x00\x05\x00'\
b'\x00\x18\x28\x28\x00\x05\x00\x08\x18\x18\x18\x00\x05\x00\x24\x28'\
b'\x28\x10\x00\x04\x00\x01\x29\x07\x00\x08\x00\x1c\x22\x59\x65\x55'\
b'\x6d\x12\x0c\x05\x00\x30\x0e\x11\x0e\x30\x05\x00\x3f\x29\x25\x3a'\
b'\x00\x06\x00\x1c\x22\x21\x21\x32\x00\x06\x00\x3f\x21\x21\x1e\x00'\
b'\x00\x05\x00\x3f\x29\x29\x21\x00\x05\x00\x3f\x09\x09\x01\x00\x06'\
b'\x00\x1c\x22\x21\x29\x29\x38\x06\x00\x3e\x08\x08\x3f\x00\x00\x02'\
b'\x00\x3f\x00\x04\x00\x30\x20\x3e\x00\x05\x00\x3e\x04\x1a\x21\x00'\
b'\x04\x00\x3e\x20\x20\x00\x07\x00\x3f\x18\x30\x0c\x3f\x00\x00\x06'\
b'\x00\x3f\x04\x18\x3f\x00\x00\x06\x00\x1c\x22\x21\x21\x21\x1e\x05'\
b'\x00\x3f\x09\x09\x06\x00\x06\x00\x1c\x22\x21\x21\x21\x1e\x06\x00'\
b'\x3f\x09\x09\x3f\x00\x00\x05\x00\x12\x25\x29\x29\x3a\x05\x00\x01'\
b'\x01\x3f\x01\x01\x06\x00\x3e\x20\x20\x3f\x00\x00\x05\x00\x01\x0e'\
b'\x30\x1c\x03\x08\x00\x03\x1c\x3c\x03\x1e\x30\x0e\x00\x05\x00\x20'\
b'\x12\x0c\x12\x21\x05\x00\x01\x06\x38\x06\x01\x05\x00\x21\x31\x2d'\
b'\x23\x21\x02\x00\xff\x00\x02\x00\x0e\x10\x02\x00\x81\xff\x04\x00'\
b'\x04\x02\x06\x00\x05\x00\x00\x40\x40\x40\x00\x03\x00\x00\x00\x00'\
b'\x04\x00\x34\x34\x34\x3c\x04\x00\x3f\x24\x24\x3c\x04\x00\x1c\x24'\
b'\x24\x24\x04\x00\x18\x24\x24\x3f\x04\x00\x18\x34\x34\x2c\x02\x00'\
b'\x3e\x05\x04\x00\x5c\xa4\xa4\x7c\x04\x00\x3e\x04\x3c\x00\x02\x00'\
b'\x3c\x00\x02\x00\xfc\x00\x04\x00\x3f\x08\x14\x20\x02\x00\x3e\x00'\
b'\x07\x00\x3c\x04\x3c\x04\x3c\x00\x00\x04\x00\x3c\x04\x3c\x00\x04'\
b'\x00\x18\x24\x24\x3c\x04\x00\xfc\x24\x44\x3c\x04\x00\x18\x24\x24'\
b'\xfc\x03\x00\x3c\x00\x00\x04\x00\x2c\x2c\x34\x30\x02\x00\x3e\x24'\
b'\x04\x00\x3c\x20\x3c\x00\x04\x00\x0c\x30\x18\x04\x06\x00\x1c\x30'\
b'\x0c\x18\x3c\x00\x04\x00\x24\x18\x3c\x00\x04\x00\x8c\xf0\x18\x04'\
b'\x04\x00\x20\x34\x2c\x20\x03\x00\x18\xe7\x00\x02\x00\x7e\x00\x03'\
b'\x00\xe7\x18\x00\x05\x00\x08\x08\x08\x00\x00'

_index =\
b'\x00\x00\x06\x00\x0a\x00\x0e\x00\x13\x00\x19\x00\x1f\x00\x28\x00'\
b'\x2f\x00\x33\x00\x38\x00\x3d\x00\x42\x00\x49\x00\x4d\x00\x52\x00'\
b'\x56\x00\x5a\x00\x60\x00\x66\x00\x6c\x00\x72\x00\x78\x00\x7e\x00'\
b'\x84\x00\x8a\x00\x90\x00\x96\x00\x9a\x00\x9e\x00\xa5\x00\xac\x00'\
b'\xb3\x00\xb9\x00\xc3\x00\xca\x00\xd1\x00\xd9\x00\xe1\x00\xe8\x00'\
b'\xef\x00\xf7\x00\xff\x00\x03\x01\x09\x01\x10\x01\x16\x01\x1f\x01'\
b'\x27\x01\x2f\x01\x36\x01\x3e\x01\x46\x01\x4d\x01\x54\x01\x5c\x01'\
b'\x63\x01\x6d\x01\x74\x01\x7b\x01\x82\x01\x86\x01\x8a\x01\x8e\x01'\
b'\x94\x01\x9b\x01\xa0\x01\xa6\x01\xac\x01\xb2\x01\xb8\x01\xbe\x01'\
b'\xc2\x01\xc8\x01\xce\x01\xd2\x01\xd6\x01\xdc\x01\xe0\x01\xe9\x01'\
b'\xef\x01\xf5\x01\xfb\x01\x01\x02\x06\x02\x0c\x02\x10\x02\x16\x02'\
b'\x1c\x02\x24\x02\x2a\x02\x30\x02\x36\x02\x3b\x02\x3f\x02\x44\x02'\
b'\x4b\x02'

_mvfont = memoryview(_font)

def _chr_addr(ordch):
    offset = 2 * (ordch - 32)
    return int.from_bytes(_index[offset:offset + 2], 'little')
    
def get_width(s):
    width = 0
    for ch in s:
        ordch = ord(ch)
        ordch = ordch + 1 if ordch >= 32 and ordch <= 126 else 32
        offset = _chr_addr(ordch)
        width += int.from_bytes(_font[offset:offset + 2], 'little')
    return width

def get_ch(ch):
    ordch = ord(ch)
    ordch = ordch + 1 if ordch >= 32 and ordch <= 126 else 32
    offset = _chr_addr(ordch)
    width = int.from_bytes(_font[offset:offset + 2], 'little')
    next_offs = _chr_addr(ordch +1)
    return _mvfont[offset + 2:next_offs], width
 


